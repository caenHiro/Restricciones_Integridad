SET SEARCH_PATH TO REPRESENTANTES , CASILLAS , GEOGRAFICO , PARTIDOSPOLITICOS;
/**
DROP FUNCTION IDS_TRIGGER();
**/
CREATE OR REPLACE FUNCTION IDS_TRIGGER()
RETURNS TRIGGER AS $$
	BEGIN
		IF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_ACREDITADOS' THEN
			NEW.ID_REPRESENTANTE_ACRE := (SELECT CASE WHEN MAX(ID_REPRESENTANTE_ACRE) IS NOT NULL
	 	THEN MAX(ID_REPRESENTANTE_ACRE) +1 ELSE COUNT(ID_REPRESENTANTE_ACRE) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_ACREDITADOS );

		ELSIF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_SUSTITUCION' THEN
			NEW.ID_SUSTITUCION := (SELECT CASE WHEN MAX(ID_SUSTITUCION) IS NOT NULL
	 	THEN MAX(ID_SUSTITUCION) +1 ELSE COUNT(ID_SUSTITUCION) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_SUSTITUCION );

		ELSIF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_DATOS_HISTORICO' THEN
			NEW.ID_HISTORICO := (SELECT CASE WHEN MAX(ID_HISTORICO) IS NOT NULL
	 	THEN MAX(ID_HISTORICO) +1 ELSE COUNT(ID_HISTORICO) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_DATOS_HISTORICO );

		ELSIF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_PRELIMINARES_HISTORICO' THEN
			NEW.ID_HISTORICO := (SELECT CASE WHEN MAX(ID_HISTORICO) IS NOT NULL
	 	THEN MAX(ID_HISTORICO) +1 ELSE COUNT(ID_HISTORICO) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_PRELIMINARES_HISTORICO );

		ELSIF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_CASILLA_HISTORICO' THEN
			NEW.ID_HISTORICO := (SELECT CASE WHEN MAX(ID_HISTORICO) IS NOT NULL
	 	THEN MAX(ID_HISTORICO) +1 ELSE COUNT(ID_HISTORICO) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_CASILLA_HISTORICO );

		ELSIF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_GENERALES_HISTORICO' THEN
			NEW.ID_HISTORICO := (SELECT CASE WHEN MAX(ID_HISTORICO) IS NOT NULL
	 	THEN MAX(ID_HISTORICO) +1 ELSE COUNT(ID_HISTORICO) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_GENERALES_HISTORICO );

		ELSIF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_ACREDITADOS_HISTORICO' THEN
			NEW.ID_HISTORICO := (SELECT CASE WHEN MAX(ID_HISTORICO) IS NOT NULL
	 	THEN MAX(ID_HISTORICO) +1 ELSE COUNT(ID_HISTORICO) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_ACREDITADOS_HISTORICO );

		ELSIF UPPER (TG_TABLE_NAME) = 'RESPONSABLES_ACREDITACION' THEN
			NEW.ID_RESPONBLE_ACRE := (SELECT CASE WHEN MAX(ID_RESPONBLE_ACRE) IS NOT NULL
	 	THEN MAX(ID_RESPONBLE_ACRE) +1 ELSE COUNT(ID_RESPONBLE_ACRE) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.RESPONSABLES_ACREDITACION );

	 	ELSIF UPPER (TG_TABLE_NAME) = 'REPRESENTANTES_SUSTITUCION' THEN
			NEW.id_sustitucion := (SELECT CASE WHEN MAX(id_sustitucion) IS NOT NULL
	 	THEN MAX(id_sustitucion) +1 ELSE COUNT(id_sustitucion) +1 
	 	END ID_NUEVO  FROM REPRESENTANTES.REPRESENTANTES_SUSTITUCION );

		ELSE
			  RAISE EXCEPTION 'UPS! SE GENERO UN ERROR YA QUE NO SE ENCUENTRA EL NOMBRE DE LA TABLA -> %' , TG_TABLE_NAME
	          USING HINT = 'COMUNICATE CON TU ADMINISTRADOR DE BASES DE DATOS.';
	          RETURN  NULL;
		END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

COMMENT ON FUNCTION IDS_TRIGGER () is 'Procedimiento encargado de generar el identificador, consecutivo de las tablas 
representantes acreditado, representantes sustituciones, datos históricos, preliminares históricos, casillas históricos, 
generales históricos, acreditados históricos. Como se puede observar lo que realiza este procedimiento es preguntar 
el nombre de la tabla que lo manda a llamar, y después realiza una consulta sobre esta tabla para saber cual es el 
último número que se tiene registrado en ella, para regresar ese valor  más uno para generar el valor del identificador 
que se quiere guardar.';
/**
DROP TRIGGER GENERA_IDS_REPRESENTANTES_ACREDITADOS;
**/
CREATE TRIGGER GENERA_IDS_REPRESENTANTES_ACREDITADOS
    BEFORE INSERT ON REPRESENTANTES_ACREDITADOS
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_REPRESENTANTES_ACREDITADOS ON REPRESENTANTES_ACREDITADOS is 'Trigger  de la tabla 
REPRESENTANTES_ACREDITADOS';
/**
DROP TRIGGER GENERA_IDS_REPRESENTANTES_SUSTITUCION;
**/
CREATE TRIGGER GENERA_IDS_REPRESENTANTES_SUSTITUCION
    BEFORE INSERT ON REPRESENTANTES_SUSTITUCION
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_REPRESENTANTES_SUSTITUCION ON REPRESENTANTES_SUSTITUCION is 'Trigger  de la tabla 
REPRESENTANTES_SUSTITUCION';
/**
DROP TRIGGER GENERA_IDS_REPRESENTANTES_DATOS_HISTORICO;
**/
CREATE TRIGGER GENERA_IDS_REPRESENTANTES_DATOS_HISTORICO
    BEFORE INSERT ON REPRESENTANTES_DATOS_HISTORICO
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_REPRESENTANTES_DATOS_HISTORICO ON REPRESENTANTES_DATOS_HISTORICO is 'Trigger  de la tabla 
REPRESENTANTES_DATOS_HISTORICO';
/**
DROP TRIGGER GENERA_IDS_REPRESENTANTES_PRELIMINARES_HISTORICO;
**/
CREATE TRIGGER GENERA_IDS_REPRESENTANTES_PRELIMINARES_HISTORICO
    BEFORE INSERT ON REPRESENTANTES_PRELIMINARES_HISTORICO
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_REPRESENTANTES_PRELIMINARES_HISTORICO ON REPRESENTANTES_PRELIMINARES_HISTORICO is 'Trigger  de la tabla 
REPRESENTANTES_PRELIMINARES_HISTORICO';
/**
DROP TRIGGER GENERA_IDS_REPRESENTANTES_CASILLA_HISTORICO;
**/
CREATE TRIGGER GENERA_IDS_REPRESENTANTES_CASILLA_HISTORICO
    BEFORE INSERT ON REPRESENTANTES_CASILLA_HISTORICO
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_REPRESENTANTES_CASILLA_HISTORICO ON REPRESENTANTES_CASILLA_HISTORICO is 'Trigger  de la tabla 
REPRESENTANTES_CASILLA_HISTORICO';
/**
DROP TRIGGER GENERA_IDS_REPRESENTANTES_GENERALES_HISTORICO;
**/
CREATE TRIGGER GENERA_IDS_REPRESENTANTES_GENERALES_HISTORICO
    BEFORE INSERT ON REPRESENTANTES_GENERALES_HISTORICO
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_REPRESENTANTES_GENERALES_HISTORICO ON REPRESENTANTES_GENERALES_HISTORICO is 'Trigger  de la tabla 
REPRESENTANTES_GENERALES_HISTORICO';
/**
DROP TRIGGER GENERA_IDS_REPRESENTANTES_ACREDITADOS_HISTORICO;
**/
CREATE TRIGGER GENERA_IDS_REPRESENTANTES_ACREDITADOS_HISTORICO
    BEFORE INSERT ON REPRESENTANTES_ACREDITADOS_HISTORICO
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_REPRESENTANTES_ACREDITADOS_HISTORICO ON REPRESENTANTES_ACREDITADOS_HISTORICO is 'Trigger  de la tabla 
REPRESENTANTES_ACREDITADOS_HISTORICO';
/**
DROP TRIGGER GENERA_IDS_RESPONSABLES_ACREDITACION;
**/
CREATE TRIGGER GENERA_IDS_RESPONSABLES_ACREDITACION
    BEFORE INSERT ON RESPONSABLES_ACREDITACION
    FOR EACH ROW
    EXECUTE PROCEDURE IDS_TRIGGER();

COMMENT ON TRIGGER GENERA_IDS_RESPONSABLES_ACREDITACION ON RESPONSABLES_ACREDITACION IS 'Trigger  de la tabla  
RESPONSABLES_ACREDITACION';
